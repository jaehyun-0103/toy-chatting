name: CD

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          sudo apt-get install -y docker-compose

      - name: Build and push Docker image using docker-compose
        run: |
          docker-compose -f docker-compose.prod.yml build
          docker-compose -f docker-compose.prod.yml push

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ steps.check_ec2.outputs.is_running == 'true' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install SSH Client
        run: |
          sudo apt-get update
          sudo apt-get install -y sshpass

      - name: Check if EC2 instance is running
        id: check_ec2
        run: |
          instance_state=$(aws ec2 describe-instances --instance-ids ${{ secrets.EC2_INSTANCE_ID }} --query 'Reservations[0].Instances[0].State.Name' --output text)
          echo "EC2 instance state: $instance_state"
          if [ "$instance_state" == "running" ]; then
          echo "is_running=true" >> $GITHUB_ENV
          else
          echo "is_running=false" >> $GITHUB_ENV
          fi

      - name: Deploy to Production Server
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        run: |
          echo "${EC2_SSH_KEY}" | tr -d '\r' > ssh_key
          chmod 600 ssh_key
          ssh -o StrictHostKeyChecking=no -i ssh_key ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            cd /home/ubuntu/toy-chatting
            git pull origin main
            docker-compose -f docker-compose.prod.yml pull
            docker-compose -f docker-compose.prod.yml up -d --build
          EOF